<VirtualHost *:80>

    ServerName 127.0.0.1
    DocumentRoot /var/www/app/www

    <Directory />
        Options FollowSymLinks
        AllowOverride None
    </Directory>

    <Directory /var/www/app/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Require all granted
    </Directory>

    RewriteEngine on
    RewriteCond %{SERVER_NAME} =%{HTTP_HOST}
    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]

</VirtualHost>

<IfModule mod_ssl.c>
    <VirtualHost *:443>

        ServerName 127.0.0.1
        DocumentRoot /var/www/app/www

        ProxyRequests Off
        ProxyPreserveHost On
        ProxyVia Full
        <Proxy *>
            Require all granted
        </Proxy>

        <Directory /var/www/app/www/logout>
            AllowOverride All
        </Directory>

        OIDCProviderMetadataURL https://${AUTH0_AUTH_DOMAIN}/.well-known/openid-configuration
        OIDCSSLValidateServer Off

        OIDCCryptoPassphrase ${APP_SESSION_SECRET}

        ##
        ## use the following setting to enable mod_auth_openidc to directly
        ## handle logout by redirecting the user to the Auth0 logout endpoint
        ## ... this can cause an inconsistent redirection experience
        ##
        #OIDCProviderEndSessionEndpoint https://${AUTH0_AUTH_DOMAIN}/v2/logout

        OIDCClientID ${AUTH0_CLIENT_ID}
        OIDCClientSecret ${AUTH0_CLIENT_SECRET}

        OIDCScope "openid email profile"
        OIDCClaimPrefix ""
        OIDCRedirectURI ${WEB_APP_HTTP_URL}/callback
        OIDCResponseType "id_token token"
        OIDCOAuthRemoteUserClaim sub
        OIDCTokenBindingPolicy disabled
        OIDCAuthNHeader REMOTE_USER


        ##
        ## optional: add additional connection paramter to authorize redirect
        ##
        #OIDCAuthRequestParams connection=Username-Password-Authentication


        #OIDCProviderUserInfoEndpoint https://${AUTH0_AUTH_DOMAIN}/userinfo
        OIDCPassIDTokenAs "claims"
        OIDCPassUserInfoAs "claims"
        OIDCPassClaimsAs "both"
        OIDCInfoHook "access_token"

        OIDCCookieDomain ${WEB_APP_DOMAIN}
        OIDCCookie "auth0_oidc_cookie"

        ##
        ## OIDCSessionType server-cache[:persistent]|client-cookie[:persistent]
        ##
        OIDCSessionType client-cookie
        #OIDCSessionType server-cache


        ##
        ## OIDCPassIDTokenAs [claims|payload|serialized]+
        ##
        #OIDCPassIDTokenAs claims


        ##
        ## supports non-OIDC compliant custom claim conaining no namespace prefix
        ##
        Header add Set-Cookie "example=%{EXTERNALID}e;path=/;HttpOnly;Secure;SameSite" env=EXTERNALID

        ##
        ## supports OIDC compliant custom claim containing namespace prefix
        ##
        Header add Set-Cookie "EXAMPLE_SESSION_COOKIE=%{HTTPS---EXAMPLE.COM-EXTERNALID}e;path=/;HttpOnly;Secure;SameSite" env=HTTPS---EXAMPLE.COM-EXTERNALID

        <Location /callback>
            AuthType openid-connect
            Require valid-user
        </Location>

        <Location /protected>
            Require valid-user
            OIDCUnAutzAction "auth"
            ##
            ## optional: add scopes and audience claims
            ##
            OIDCPathAuthRequestParams audience=${AUTH0_AUDIENCE}
            OIDCPathScope "[YOUR SCOPES HERE]"
            AuthType openid-connect
        </Location>

        <Location /phpinfo>
            Require valid-user
            OIDCUnAutzAction "auth"
            OIDCPathAuthRequestParams audience=${AUTH0_AUDIENCE}
            AuthType openid-connect
        </Location>

        <Location /login>
            Require valid-user
            OIDCUnAutzAction "auth"
            OIDCPathAuthRequestParams audience=${AUTH0_AUDIENCE}
            AuthType openid-connect
        </Location>


        SSLEngine on
        SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt
        SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key

    </VirtualHost>
</IfModule>